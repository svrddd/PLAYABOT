import logging
import asyncio
import os
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    KeyboardButton, 
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    FSInputFile
)

# --- –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é ---
BOT_TOKEN = "7621100705:AAHJ7R4N4ihthLUjV7cvcP95WrAo4GQOvl8"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_IDS = [2105766790, 523962812]  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
# --- –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DB_PATH = "coffee_shop.db"
IMAGES_DIR = "images"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(IMAGES_DIR, exist_ok=True)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_file):
        self.conn = sqlite3.connect(db_file)
        self.cursor = self.conn.cursor()
        
    def setup(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            phone TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            image_path TEXT
        )
        ''')
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER,
            name TEXT NOT NULL,
            description TEXT,
            price REAL NOT NULL,
            image_path TEXT,
            available BOOLEAN DEFAULT 1,
            FOREIGN KEY (category_id) REFERENCES categories (id)
        )
        ''')
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            status TEXT NOT NULL,
            total_price REAL NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            payment_method TEXT,
            pickup_time TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            product_id INTEGER,
            quantity INTEGER NOT NULL,
            price REAL NOT NULL,
            FOREIGN KEY (order_id) REFERENCES orders (id),
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
        ''')
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT NOT NULL,
            rating INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.cursor.execute("SELECT COUNT(*) FROM categories")
        if self.cursor.fetchone()[0] == 0:
            categories = [
                ("–ö–æ—Ñ–µ", "–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∫–æ—Ñ–µ", "coffee.jpg"),
                ("–ù–∞–ø–∏—Ç–∫–∏", "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —á–∞–π–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", "tea.jpg"),
                ("–ï–¥–∞", "–°–ª–∞–¥–æ—Å—Ç–∏ –∏ –≤—ã–ø–µ—á–∫–∞", "desserts.jpg"),
            ]
            self.cursor.executemany("INSERT INTO categories (name, description, image_path) VALUES (?, ?, ?)", categories)
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            products = [
                (1, "–ê–º–µ—Ä–∏–∫–∞–Ω–æ 200–º–ª", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–µ—Ä–Ω—ã–π –∫–æ—Ñ–µ", 200, "americano.jpg", 1),
                (1, "–ö–∞–ø—É—á–∏–Ω–æ 200–º–ª", "–ö–æ—Ñ–µ —Å –º–æ–ª–æ—á–Ω–æ–π –ø–µ–Ω–∫–æ–π", 230, "cappuccino.jpg", 1),
                (1, "–õ–∞—Ç—Ç–µ 300–º–ª", "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º", 260, "latte.jpg", 1),
                (2, "–ú–∏–ª–∫—à–µ–π–∫ –®–æ–∫–æ–ª–∞–¥", "–û—Å–≤–µ–∂–∞—é—â–∏–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π", 300, "green_tea.jpg", 1),
                (2, "–ú–∏–ª–∫—à–µ–π–∫ –®–æ–∫–æ–ª–∞–¥", "–ö—Ä–µ–ø–∫–∏–π —á–µ—Ä–Ω—ã–π —á–∞–π", 300, "black_tea.jpg", 1),
                (3, "–ü–æ–Ω—á–∏–∫ –®–æ–∫–æ–ª–∞–¥", "–ù–µ–∂–Ω—ã–π –¥–µ—Å–µ—Ä—Ç —Å —Ç–≤–æ—Ä–æ–∂–Ω–æ–π –Ω–∞—á–∏–Ω–∫–æ–π", 180, "cheesecake.jpg", 1),
                (3, "–ö—Ä—É–∞—Å—Å–∞–Ω –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–•—Ä—É—Å—Ç—è—â–∞—è –≤—ã–ø–µ—á–∫–∞", 180, "croissant.jpg", 1),
                (4, "–°—ç–Ω–¥–≤–∏—á —Å –∫—É—Ä–∏—Ü–µ–π", "–°—ç–Ω–¥–≤–∏—á —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ", 180, "chicken_sandwich.jpg", 1)
            ]
            self.cursor.executemany("INSERT INTO products (category_id, name, description, price, image_path, available) VALUES (?, ?, ?, ?, ?, ?)", products)
        self.conn.commit()
            
    def register_user(self, user_id, username, full_name, phone=None):
        self.cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, username, full_name, phone) VALUES (?, ?, ?, ?)",
            (user_id, username, full_name, phone)
        )
        self.conn.commit()
        
    def get_user(self, user_id):
        self.cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return self.cursor.fetchone()
        
    def get_categories(self):
        self.cursor.execute("SELECT id, name, description, image_path FROM categories")
        return self.cursor.fetchall()
        
    def get_products_by_category(self, category_id):
        self.cursor.execute(
            "SELECT id, name, description, price, image_path FROM products WHERE category_id = ? AND available = 1",
            (category_id,)
        )
        return self.cursor.fetchall()
        
    def get_product_by_id(self, product_id):
        self.cursor.execute(
            "SELECT id, name, description, price, image_path FROM products WHERE id = ?",
            (product_id,)
        )
        return self.cursor.fetchone()
        
    def create_order(self, user_id, cart, payment_method, pickup_time):
        total_price = sum(item['price'] * item['quantity'] for item in cart)
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        self.cursor.execute(
            "INSERT INTO orders (user_id, status, total_price, payment_method, pickup_time) VALUES (?, ?, ?, ?, ?)",
            (user_id, "–Ω–æ–≤—ã–π", total_price, payment_method, pickup_time)
        )
        order_id = self.cursor.lastrowid
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for item in cart:
            self.cursor.execute(
                "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)",
                (order_id, item['product_id'], item['quantity'], item['price'])
            )
        self.conn.commit()
        return order_id
        
    def get_order_details(self, order_id):
        self.cursor.execute(
            "SELECT id, user_id, status, total_price, created_at, payment_method, pickup_time FROM orders WHERE id = ?",
            (order_id,)
        )
        order = self.cursor.fetchone()
        if not order:
            return None
        self.cursor.execute(
            """
            SELECT oi.product_id, p.name, oi.quantity, oi.price 
            FROM order_items oi 
            JOIN products p ON oi.product_id = p.id 
            WHERE oi.order_id = ?
            """,
            (order_id,)
        )
        items = self.cursor.fetchall()
        return {
            "id": order[0],
            "user_id": order[1],
            "status": order[2],
            "total_price": order[3],
            "created_at": order[4],
            "payment_method": order[5],
            "pickup_time": order[6],
            "items": items
        }
        
    def add_review(self, user_id, text, rating):
        self.cursor.execute(
            "INSERT INTO reviews (user_id, text, rating) VALUES (?, ?, ?)",
            (user_id, text, rating)
        )
        self.conn.commit()
        
    def close(self):
        self.conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)
db.setup()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    choosing_category = State()
    choosing_product = State()
    adding_to_cart = State()
    viewing_cart = State()
    checkout = State()
    payment_method = State()
    pickup_time = State()
    confirming_order = State()

class FeedbackStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_rating = State()

class ContactAdminStates(StatesGroup):
    waiting_for_message = State()

class RegistrationStates(StatesGroup):
    waiting_for_phone = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üçΩ –ú–µ–Ω—é")],
            [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")],
            [KeyboardButton(text="üìç –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏"), KeyboardButton(text="üì£ –ù–∞—à –∫–∞–Ω–∞–ª")],
        ],
        resize_keyboard=True
    )
    return keyboard

def get_categories_keyboard(categories):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    buttons = []
    for category in categories:
        buttons.append([InlineKeyboardButton(text=category[1], callback_data=f"category:{category[0]}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_products_keyboard(products, category_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    buttons = []
    for product in products:
        buttons.append([InlineKeyboardButton(text=f"{product[1]} - {product[3]} ‚ÇΩ", callback_data=f"product:{product[0]}")])
    buttons.append([InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_product_keyboard(product_id, in_cart=False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    buttons = [
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease:{product_id}"),
            InlineKeyboardButton(text="1", callback_data="quantity"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase:{product_id}")
        ],
        [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{product_id}")]
    ]
    if in_cart:
        buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_from_cart:{product_id}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cart_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    buttons = [
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_method_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="payment:cash")],
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π", callback_data="payment:card")],
        [InlineKeyboardButton(text="üì± –°–ë–ü", callback_data="payment:sbp")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="back_to_cart")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_pickup_time_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è"""
    current_hour = datetime.now().hour
    current_minute = datetime.now().minute
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 15 –º–∏–Ω—É—Ç
    if current_minute < 10:
        next_minute = 10
    elif current_minute < 30:
        next_minute = 30
    elif current_minute < 40:
        next_minute = 40
    else:
        next_minute = 0
        current_hour = (current_hour + 1) % 24
    times = []
    for i in range(4):  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º 4 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞
        hour = (current_hour + ((next_minute + i * 10) // 60)) % 24
        minute = (next_minute + i * 10) % 60
        time_str = f"{hour:02d}:{minute:02d}"
        times.append(time_str)
    buttons = []
    for time_str in times:
        buttons.append([InlineKeyboardButton(text=time_str, callback_data=f"time:{time_str}")])
    buttons.append([InlineKeyboardButton(text="üïí –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", callback_data="time:asap")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã", callback_data="back_to_payment")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_order_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_rating_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    buttons = []
    for rating in range(1, 6):
        buttons.append(InlineKeyboardButton(text="‚≠ê" * rating, callback_data=f"rating:{rating}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–ª—å—à–µ –∏–¥—É—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å ---
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_any_message(message: types.Message):
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler()
async def handle_callback(callback: types.CallbackQuery):
    await callback.answer()
    print(f"Callback data: {callback.data}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
