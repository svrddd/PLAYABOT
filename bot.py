import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import reply_keyboard, keyboard

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7621100705:AAHJ7R4N4ihthLUjV7cvcP95WrAo4GQOvl8"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 2105766790

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçΩ –ú–µ–Ω—é")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")],
        [KeyboardButton(text="üìç –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏")]
    ],
    resize_keyboard=True
)

# –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
menu_items = {
    "–ö–æ—Ñ–µ": ["–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–ö–∞–ø—É—á–∏–Ω–æ", "–õ–∞—Ç—Ç–µ"],
    "–ù–∞–ø–∏—Ç–∫–∏": ["–ß–∞–π", "–ú–æ—Ä—Å"],
    "–î–µ—Å–µ—Ä—Ç—ã": ["–ü–æ–Ω—á–∏–∫", "–¢–æ—Ä—Ç"]
}

cart = []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda message: message.text in ["üçΩ –ú–µ–Ω—é", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                                                          "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                                                          "üìç –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏"])
async def handle_main_menu(message: types.Message):
    text = message.text
    if text == "üçΩ –ú–µ–Ω—é":
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        await show_cart(message)
    elif text == "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
        await dp.current_state(user=message.from_user.id).set_state("waiting_review")
    elif text == "üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:")
        await dp.current_state(user=message.from_user.id).set_state("waiting_admin_message")
    elif text == "üìç –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏":
        await message.answer("–ù–∞—à –∞–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 1.\n–ù–∞ –∫–∞—Ä—Ç–µ:", reply_markup=location_keyboard())

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
def category_keyboard():
    buttons = [
        [KeyboardButton(text="–ö–æ—Ñ–µ")],
        [KeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏")],
        [KeyboardButton(text="–î–µ—Å–µ—Ä—Ç—ã")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda message: message.text in ["–ö–æ—Ñ–µ", "–ù–∞–ø–∏—Ç–∫–∏", "–î–µ—Å–µ—Ä—Ç—ã"])
async def handle_category(message: types.Message):
    category = message.text
    items = menu_items.get(category, [])
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=item)] for item in items] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(f"{category}:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(lambda message: True)
async def handle_product_or_back(message: types.Message):
    text = message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        return
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart.append(text)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {text}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
async def show_cart(message):
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    txt = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(cart)
    await message.answer(txt, reply_markup=cart_keyboard())

def cart_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(lambda message: message.text in ["üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üîô"])
async def handle_cart_buttons(message: types.Message):
    if message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        cart.clear()
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    elif message.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        if not cart:
            await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
        order_text = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n" + "\n".join(cart)
        await bot.send_message(ADMIN_ID, order_text)
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –°–ø–∞—Å–∏–±–æ!")
        cart.clear()
    elif message.text == "üîô":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
@dp.message_handler(state="waiting_review")
async def handle_review(message: types.Message):
    review = message.text
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã –∫—É–¥–∞-—Ç–æ
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    await dp.current_state(user=message.from_user.id).set_state(None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@dp.message_handler(state="waiting_admin_message")
async def handle_admin_message(message: types.Message):
    text = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫)
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω—É –æ–±—Ä–∞—Ç–Ω–æ
    await bot.send_message(ADMIN_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{text}")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    await dp.current_state(user=message.from_user.id).set_state(None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(commands=["location"])
async def send_location(message: types.Message):
    await message.answer("–ù–∞—à –∞–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 1.", reply_markup=location_keyboard())

def location_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", request_location=True))
    return kb

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ"
@dp.message_handler(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ")
async def handle_location_request(message: types.Message):
    await message.answer_location(latitude=55.7558, longitude=37.6173)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
@dp.message_handler(state="waiting_admin_message")
async def handle_admin_msg(message: types.Message):
    text = message.text
    await bot.send_message(ADMIN_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n{text}")
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    await dp.current_state(user=message.from_user.id).set_state(None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /help
@dp.message_handler(commands=["help"])
async def handle_help(message: types.Message):
    await message.answer("–≠—Ç–æ –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤, –æ—Ç–∑—ã–≤–æ–≤ –∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def handle_errors(update, exception):
    print(f"–û—à–∏–±–∫–∞: {exception}")
    return True

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())

